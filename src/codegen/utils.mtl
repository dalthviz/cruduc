[comment encoding = UTF-8 /]
[module utils('http://www.eclipse.org/uml2/5.0.0/UML')]

[**
 * Obtiene todas las clases pertenecientes al modelo
*/]
[query public getClasses(m : Model) : Sequence(Class) =
m.eContents()->select(e | e.oclIsTypeOf(Class))
/]

[query public getAllAttribs(c : Class) : OrderedSet(Property) =
c.allAttributes()->union(c.parents().allAttributes())->reject(isID())->asOrderedSet()
/]

[**
 * Obtiene los atributos asociados a la clase incluyedo atributos heredados
*/]
[query public getNumAttribs(c : Class) : Integer =
c.allAttributes()->union(c.parents().allAttributes())->size()
/]


[**
 * Obtiene cantidad de relaciones de composición de la clase
*/]
[query public getCompositeSize(c : Class): Integer = 
c.getCompositeCollectionAttributes()->size()
/]

[**
 * Constantes
*/]
[query public getLowEI(e : Element): Integer = 3/]

[query public getMediumEI(e : Element): Integer = 4/]

[query public getHighEI(e : Element): Integer = 6/]

[query public getLowEO(e : Element): Integer = 4/]

[query public getMediumEO(e : Element): Integer = 5/]

[query public getHighEO(e : Element): Integer = 7/]

[query public getLowEQ(e : Element): Integer = 3/]

[query public getMediumEQ(e : Element): Integer = 4/]

[query public getHighEQ(e : Element): Integer = 6/]

[query public getLowILF(e : Element): Integer = 7/]

[query public getMediumILF(e : Element): Integer = 10/]

[query public getHighILF(e : Element): Integer = 15/]



[**
 * Determina si la complejidad es baja ILF
*/]
[query public isLowILF(c: Class): Boolean = 
( c.getNumAttribs()<=19 and ( c.getCompositeCollectionAttributes()->size() <= 5) )
or
(c.getNumAttribs()>=20 and c.getNumAttribs() <=50 and c.getCompositeCollectionAttributes()->size() = 1 )
/]

[**
 * Determina si la complejidad es media ILF 
*/]

[query public isMediumILF(c : Class) : Boolean = 
(c.getNumAttribs()<=19 and c.getCompositeSize() > 5 )
or
(c.getNumAttribs()>=20 and c.getNumAttribs()<=50 and c.getCompositeSize()>=2 and c.getCompositeSize()<=5)
or
(c.getNumAttribs()>50 and c.getCompositeSize() = 1)
/]

[query public getId(c : Class) : Property =
c.allAttributes()->any(isID())
/]

[query public getRootClasses(m : Model) : Sequence(Class) =
m.getClasses()->reject(isChild())
/]

[query public isMany2Many(a : Property) : Boolean =
    a.isNavigable()
and a.getUpper() <> 1
and a.aggregation = AggregationKind::none
and a.getOtherEnd().getUpper() <> 1
and a.getOtherEnd().aggregation = AggregationKind::none
/]

[query public isOne2One(a : Property) : Boolean =
    a.isNavigable()
and a.getUpper() = 1
and a.getOtherEnd().getUpper() = 1
/]

[query public isOne2Many(a : Property) : Boolean =
    a.isNavigable()
and a.getUpper() <> 1
and a.getOtherEnd().getUpper() = 1
/]

[query public isMany2One(a : Property) : Boolean =
    a.isNavigable()
and a.getUpper() = 1
and a.aggregation = AggregationKind::none
and a.getOtherEnd().getUpper() <> 1
/]

[**
 * Obtiene la colecci&oacute;n de atributos de la clase, cuyo tipo es otra clase del modelo y son aceptados por el generador.<br>
 * 
 * Actualmente los atributos v&aacute;lidos cumplen con las siguientes caracter&iacute;sticas:
 * - Es navegable
 * - Su l&iacute;mite m&aacute;ximo de objetos es diferente de cero
 * - El otro extremo de la relaci&oacute;n apunta a la clase que realiza la consulta
 * - En caso de haber agregaci&oacute;n, el otro extremo de la relaci&oacute;n no puede tener agregaci&oacute;n y su l&iacute;mite m&aacute;ximo debe ser 1
 * - En caso del atributo ser composite, el extremo opuesto debe ser navegable
*/]
[query public getRelationshipAttributes(c : Class) : Set(Property) =
c.getAssociations()->union(c.parents().getAssociations())->collect( asc |
    asc.getAllAttributes()->select(
        a | a.isNavigable()
        and a.getUpper() <> 0
        and a.getOtherEnd().type = c
        and (a.aggregation <> AggregationKind::none implies (
                a.getOtherEnd().getUpper() = 1
            and a.getOtherEnd().aggregation = AggregationKind::none)
        )
        and (a.getOtherEnd().aggregation <> AggregationKind::none implies (
                a.getUpper() = 1
            and a.aggregation = AggregationKind::none)
        )
    )
)->asSet()
/]

[query public hasRelationshipAttributes(c : Class) : Boolean =
c.getRelationshipAttributes()->notEmpty()
/]

[query public getReferences(c : Class, includeParent : Boolean) : OrderedSet(Property) =
c.getRelationshipAttributes()->select(
    a | a.getUpper() = 1
    and (a.getOtherEnd().isComposite() implies includeParent)
)->asOrderedSet()
/]

[**
 * Gets a list of attributes member of a relationship with upper cardinality higher than 1
*/]
[query public getCollectionAttributes(c : Class) : Set(Property) =
c.getRelationshipAttributes()->select(getUpper() <> 1)->asSet()
/]

[**
 * 
*/]
[query public hasReferences(c : Class, includeParent : Boolean) : Boolean =
c.getReferences(includeParent)->reject(isComposite())->notEmpty()
/]

[**
 * The result of Class.getCollectionAttributes is not empty
*/]
[query public isMaster(c : Class) : Boolean =
c.getCollectionAttributes()->notEmpty()
/]

[query public getCompositeCollectionAttributes(c : Class) : Set(Property) =
c.getCollectionAttributes()->select(isComposite())
/]

[query public getNonCompositeCollectionAttributes(c : Class) : Set(Property) =
c.getCollectionAttributes()->reject(isComposite())
/]

[query public hasOne2OneCompositeAssociations(c : Class) : Boolean =
c.getRelationshipAttributes()->select(isComposite())->notEmpty()
/]

[query public hasCompositeAssociations(c : Class) : Boolean =
c.getCompositeCollectionAttributes()->notEmpty()
/]

[query public hasSharedAssociations(c : Class) : Boolean =
c.getNonCompositeCollectionAttributes()->notEmpty()
/]

[query public isChild(c : Class) : Boolean =
c.getParentAttribute() <> null
 /]

[query public getParentAttribute(c : Class) : Property =
c.getReferences(true)->any(isParentAttribute())
/]

[query public isParentAttribute(a : Property) : Boolean =
a.getOtherEnd().isComposite()
/]

[query public isValidType(a : Property) : Boolean =
Set{'String','Boolean', 'Date', 'Long', 'Integer', 'Image'}->exists(t | a.type <> null and t = a.type.name)
/]

[query public hasDateAttribute(c : Class) : Boolean = c.allAttributes()->exists(isDate()) /]

[query public isDate(a : Property) : Boolean = a.type.name = 'Date' /]

[query public isComputed(a : Property) : Boolean = a.type.name = 'Computed' /]

[query public isID(a : Property) : Boolean = a.name = 'id' /]

[query public isName(a : Property) : Boolean = a.name = 'name' /]

[query public getter(a : Property) : String = 'get'.concat(a.name.toUpperFirst()) /]

[query public setter(a : Property) : String = 'set'.concat(a.name.toUpperFirst()) /]

[query public getClass(a : Property) : Class = Class.allInstances()->any(c | c.name = a.type.name) /]

[query public isRequired(a : Property) : Boolean = self.getLower() > 0 /]

[**
 * Permite identificar si el atributo es el dueÃ±o de una relaci&oacute;n.
 * Esto se da cuando el atributo es navegable y:
 * - La relaci&oacute;n es unidireccional
 * - La relaci&oacute;n es bidireccional, uno a muchos, y el atributo es de cardinalidad 1 o 0..1
 * - La relaci&oacute;n es bidireccional, muchos a muchos o uno a uno, entonces se decide cualquiera (se implementa comparando nombres y aquel que sea mayor que el otro)
*/]
[query public isRelationshipOwner(a : Property) : Boolean =
    a.isNavigable()
and (
    not a.getOtherEnd().isNavigable()
    or  (a.isOne2Many())
    or  ((a.isMany2Many() or a.isOne2One()) and a.name < a.getOtherEnd().name)
	or  a.isComposite()
)
/]

[query public getHierarchy(c : Class) : Sequence(Class) = 
Sequence(class){c}->union(
    if c.getParentAttribute() <> null then
        c.getParentAttribute().getClass().getHierarchy()
    else
        Sequence(Class){}
    endif
)
/]

[query public hasProperty(m : Element, p : String) : Boolean = 
m.getEAnnotation('genmymodel').details->exists(key = p)
/]

[query public valueOf(m : Element, p : String) : String = 
if (m.hasProperty(p)) then
m.getEAnnotation('genmymodel').details->any(key = p).value
else 
null
endif
/]


[template public getJavaType(a : Property) post (trim())]
[if (a.type.name = 'Image')]
    String
[else]
    [a.type.name/]
[/if]
[/template]

[template public getModelName(c : Class)]
[c.getModel().name/]
[/template]

[template public getCtrl(c : Class)]
[c.getName().concat('Ctrl')/]
[/template]

[template public getEntityModel(c : Class)]
[c.getName().concat('Model')/]
[/template]

[template public getModule(c : Class)]
[c.getName().concat('Module')/]
[/template]

[template public getURI(c : Class) post (trim())]
[if (c.isChild())]
    [c.getParentAttribute().getOtherEnd().name.toLowerFirst()/]
[else]
    [c.getName().concat('s')/]
[/if]
[/template]

[template public getName(c : Class)]
[c.name.toLowerFirst()/]
[/template]

[template public getDTOName(c : Class)]
[c.name.toUpperFirst().concat('DTO')/]
[/template]

[template public getMinimumDTOName(c : Class)]
[c.name.toUpperFirst().concat('DTO')/]
[/template]

[template public getBasicDTOName(c : Class)]
[c.name.toUpperFirst().concat('DetailDTO')/]
[/template]

[template public getFullDTOName(c : Class)]
[c.name.toUpperFirst().concat('FullDTO')/]
[/template]

[template public getAPIName(c : Class)]
['I'.concat(c.name).concat('Logic')/]
[/template]

[template public getEntityName(c : Class)]
[c.name.concat('Entity')/]
[/template]

[template public getPersistenceName(c : Class)]
[c.name.concat('Persistence')/]
[/template]

[template public baseGroup(m : Model)]
['co.edu.uniandes.csw.'.concat(m.name.toLowerCase())/]
[/template]

[template public basePath(m : Model)]
['/src/main/java/'.concat(m.baseGroup().replaceAll('[.]', '/')).concat('/')/]
[/template]

[template public baseTestPath(m : Model)]
['/src/test/java/'.concat(m.baseGroup().replaceAll('[.]', '/')).concat('/')/]
[/template]

[template public basePck(c : Class, suffix : String)]
[c.getModel().baseGroup().concat('.'+c.name.toLowerFirst()).concat(suffix)/]
[/template]

[template public getBackendProjectName(m : Model)]
[m.name.concat('.logic')/]
[/template]

[template public getApiProjectName(m : Model)]
[m.name.concat('.api')/]
[/template]

[template public getWebProjectName(m : Model)]
[m.name.concat('.api')/]
[/template]

[template private asArtifactId(s : String)]
[s.replace('^\\W+','').replaceAll('(?!^)([A-Z])','-$1').replaceAll('\\W+', '-').toLowerCase()/]
[/template]

[template public getArtifactId(m : Model)]
[m.name.asArtifactId()/]
[/template]

[template public getLogicArtifactId(m : Model)]
[m.getBackendProjectName().asArtifactId()/]
[/template]

[template public getApiArtifactId(m : Model)]
[m.getApiProjectName().asArtifactId()/]
[/template]

[template public getWebArtifactId(m : Model)]
[m.getWebProjectName().asArtifactId()/]
[/template]

[template public getPoolName(m : Model)]
[m.name.concat('_pool')/]
[/template]

[template public getJNDIName(m : Model)]
['java:app/jdbc/'.concat(m.name)/]
[/template]

[template public getPUName(m : Model)]
[m.name.concat('PU')/]
[/template]

[template public getMetaInfPath(m : Model)]
[m.getLogicArtifactId().concat('/src/main/resources/META-INF/')/]
[/template]

[template public getTestMetaInfPath(m : Model)]
[m.getLogicArtifactId().concat('/src/test/resources/META-INF/')/]
[/template]

[template public getTestServicesMetaInfPath(m : Model)]
[m.getApiArtifactId().concat('/src/test/resources/META-INF/')/]
[/template]

[template public getTestServicesResourcesPath(m : Model)]
[m.getApiArtifactId().concat('/src/test/resources/')/]
[/template]
 
[template public getProjectVersion(m : Model)]
0.1.0
[/template]

[template public genBeansXml(m : Model, path : String)]
[file(path.concat('beans.xml'), false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://java.sun.com/xml/ns/javaee"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">
</beans>
[/file]
[/template]

[template public getCSWGroupId(m : Model)]
co.edu.uniandes.csw
[/template]

[template public asDisplayName(s : String)]
[s.replace('^\\W+','').replaceAll('(?!^)([A-Z])',' $1').replaceAll('\\W+', ' ').toUpperFirst()/]
[/template]

[template public license(m : Model)]
The MIT License (MIT)

Copyright (c) 2016 Los Andes University

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
[/template]

[comment]Template para leer los atributos del caso 1 [/comment]
[template public getPropertiesClass(c : Class)]
[for (p : Property | c.ownedAttribute)][if (c.ownedAttribute->size()=i)][ '_'+p.name.concat('_')/][else][if (p.name <> 'id')][ '_'+p.name.concat('_ , ')/][/if][/if][/for]
[/template]


[comment]Template para leer los atributos del caso 2a,2b,2c,2d [/comment]
[template public getPropertiesCases2abcd(c : Class)]
[if (c.hasRelationshipAttributes())]
[for (a : Property | c.getRelationshipAttributes())] 
[if (a.isRelationshipOwner() and a.isOne2One())]
, _[a.name/]_ de tipo _[a.type.name/]_
[/if]
[/for]
[/if]
[/template]


[comment]Template para leer los atributos del caso 3 [/comment]
[template public getPropertiesCase3(c : Class)]
[if (c.hasRelationshipAttributes())]
[for (a : Property | c.getRelationshipAttributes())] 
[if (a.isRelationshipOwner() and a.isOne2Many() and not a.isComposite())]
### UC Agregar _[a.name/]_ a [c.name/]
| Item | Descripci&oacute;n |
|----------------------|-------------------------------------------|
|Id caso de uso:| R000 |
|Nombre caso de uso:| Agregar [a.name/] |
|Autor: | @Generated |
[c.getActor()/]
|Resumen:| El actor agrega [a.name/] en la aplicaci&oacute;n a [c.name/].|
|Precondici&oacute;n: | |
|Curso b&aacute;sico de eventos:| 1. El actor ingresa a la aplicaci&oacute;n.|
|                        | 2. El actor selecciona la opci&oacute;n de [c.name/] para agregar .|
|                        | 3. El actor selecciona la opci&oacute;n de agregar [a.name/].|
|                        | 4. El actor selecciona [a.name/].|
|                        | 5. Se guardan cambios de [c.name/].|
|Postcondici&oacute;n:|  |
|Caminos de excepci&oacute;n ||

### UC Listar _[a.name/]_ a [c.name/]
| Item | Descripci&oacute;n |
|----------------------|-------------------------------------------|
|Id caso de uso:| R000 |
|Nombre caso de uso:| Listar [a.name/] |
|Autor: | @Generated |
[c.getActor()/]
|Resumen:| El actor lista [a.name/] en la aplicaci&oacute;n a [c.name/].|
|Precondici&oacute;n: | |
|Curso b&aacute;sico de eventos:| 1. El actor ingresa a la aplicaci&oacute;n.|
|                        | 2. El actor selecciona la opci&oacute;n de listar [c.name/].|
|                        | 3. La aplicaci&oacute;n muestra la informaci&oacute;n de [a.name/] asociadas a [c.name/].|
|Postcondici&oacute;n:|  |
|Caminos de excepci&oacute;n ||

### UC Eliminar _[a.name/]_ a [c.name/]
| Item | Descripci&oacute;n |
|----------------------|-------------------------------------------|
|Id caso de uso:| R000 |
|Nombre caso de uso:| Eliminar [a.name/] |
|Autor: | @Generated |
[c.getActor()/]
|Resumen:| El actor elimina [a.name/] en la aplicaci&oacute;n a [c.name/].|
|Precondici&oacute;n: | |
|Curso b&aacute;sico de eventos:| 1. El actor ingresa a la aplicaci&oacute;n.|
|                        | 2. El actor selecciona la opci&oacute;n de eliminar [a.name/] para [c.name/].|
|                        | 3. La aplicaci&oacute;n elimina [a.name/] de [c.name/].|
|Postcondici&oacute;n:|  |
|Caminos de excepci&oacute;n ||
[else]
[null/]
[/if]
[/for]
[/if]
[/template]

[comment]Template para leer los atributos del caso 3 - menu [/comment]
[template public getPropertiesCase3Menu(c : Class)]
[if (c.hasRelationshipAttributes())]
[for (a : Property | c.getRelationshipAttributes())] 
[if (a.isRelationshipOwner() and a.isOne2Many() and not a.isComposite())]
 - ['['/]Agregar _[a.name/]_ a [c.name/][']'/](#uc-agregar-[a.name/]-a-[c.name.toLowerCase()/])
 - ['['/]Listar _[a.name/]_ a [c.name/][']'/](#uc-listar-[a.name/]-a-[c.name.toLowerCase()/])
 - ['['/]Eliminar _[a.name/]_ a [c.name/][']'/](#uc-eliminar-[a.name/]-a-[c.name.toLowerCase()/])
[else]
[null/]
[/if]
[/for]
[/if]
[/template]

[comment]Template para leer los atributos del caso 4 - menu [/comment]
[template public getPropertiesCase4Menu(c : Class)]
[if (c.hasRelationshipAttributes())]
[for (a : Property | c.getRelationshipAttributes())] 
[if (a.isRelationshipOwner() and a.isComposite())]
- ['['/]Crear _[a.name/]_ a [c.name/][']'/](#uc-crear-[a.name/]-a-[c.name.toLowerCase()/])
 - ['['/]Editar _[a.name/]_ a [c.name/][']'/](#uc-editar-[a.name/]-a-[c.name.toLowerCase()/])
 - ['['/]Eliminar _[a.name/]_ a [c.name/][']'/](#uc-eliminar-[a.name/]-a-[c.name.toLowerCase()/])
 - ['['/]Listar _[a.name/]_ a [c.name/][']'/](#uc-listar-[a.name/]-a-[c.name.toLowerCase()/])
[/if]
[/for]
[/if]
[/template]

[comment]Template para leer los atributos del caso 4 [/comment]
[template public getPropertiesCase4(c : Class)]
[if (c.hasRelationshipAttributes())]
[for (a : Property | c.getRelationshipAttributes())] 
[if (a.isRelationshipOwner() and a.isComposite())]
### UC crear _[a.name/]_ a [c.name/]
| Item | Descripci&oacute;n |
|----------------------|-------------------------------------------|
|Id caso de uso:| R000 |
|Nombre caso de uso:| Crear [a.name/] |
|Autor: | @Generated |
[c.getActor()/]
|Resumen:| El actor crea [a.name/] en la aplicaci&oacute;n a [c.name/].|
|Precondici&oacute;n: | |
|Curso b&aacute;sico de eventos:| 1. El actor ingresa a la aplicaci&oacute;n.|
|                        | 2. El actor selecciona la opci&oacute;n de [c.name/].|
|                        | 3. El actor selecciona la opci&oacute;n de crear [a.type.name/].|
|                        | 4. El actor completa el formulario de [a.type.name/].|
|                        | 5. Se guardan cambios de [c.name/].|
|Postcondici&oacute;n:|  |
|Caminos de excepci&oacute;n ||

### UC editar _[a.name/]_ a [c.name/]
| Item | Descripci&oacute;n |
|----------------------|-------------------------------------------|
|Id caso de uso:| R001 |
|Nombre caso de uso:| Editar [a.name/] |
|Autor: | @Generated |
[c.getActor()/]
|Resumen:| El actor edita [a.name/] en la aplicaci&oacute;n a [c.name/].|
|Precondici&oacute;n: | |
|Curso b&aacute;sico de eventos:| 1. El actor ingresa a la aplicaci&oacute;n.|
|                        | 2. El actor selecciona la opci&oacute;n de [c.name/].|
|                        | 3. El actor selecciona la opci&oacute;n de editar [a.type.name/].|
|                        | 4. El actor completa el formulario de [a.type.name/].|
|                        | 5. Se guardan cambios de [c.name/].|
|Postcondici&oacute;n:|  |
|Caminos de excepci&oacute;n ||

### UC eliminar _[a.name/]_ a [c.name/]
| Item | Descripci&oacute;n |
|----------------------|-------------------------------------------|
|Id caso de uso:| R002 |
|Nombre caso de uso:| Eliminar [a.name/] |
|Autor: | @Generated |
[c.getActor()/]
|Resumen:| El actor elimina [a.name/] en la aplicaci&oacute;n a [c.name/].|
|Precondici&oacute;n: | |
|Curso b&aacute;sico de eventos:| 1. El actor ingresa a la aplicaci&oacute;n.|
|                        | 2. El actor selecciona la opci&oacute;n de [c.name/].|
|                        | 3. El actor selecciona la opci&oacute;n de eliminar [a.type.name/].|
|                        | 4. La aplicaci&oacute;n elimina [a.type.name/] de [c.name/].|
|Postcondici&oacute;n:|  |
|Caminos de excepci&oacute;n ||

### UC Listar _[a.name/]_ a [c.name/]
| Item | Descripci&oacute;n |
|----------------------|-------------------------------------------|
|Id caso de uso:| R003 |
|Nombre caso de uso:| Listar [a.name/] |
|Autor: | @Generated |
[c.getActor()/]
|Resumen:| El actor lista [a.name/] en la aplicaci&oacute;n a [c.name/].|
|Precondici&oacute;n: | |
|Curso b&aacute;sico de eventos:| 1. El actor ingresa a la aplicaci&oacute;n.|
|                        | 2. El actor selecciona la opci&oacute;n [c.name/].|
|                        | 3. La aplicaci&oacute;n muestra la informaci&oacute;n de [a.name/] asociadas a [c.name/].|
|Postcondici&oacute;n:|  |
|Caminos de excepci&oacute;n ||

[/if]
[/for]
[/if]
[/template]

[comment]Template para leer los atributos del caso relaciones unidireccionales - menu [/comment]
[template public getPropertiesCaseRelMenu(c : Class)]
[if (c.hasRelationshipAttributes())]
[for (a : Property | c.getRelationshipAttributes())] 
[if (a.isRelationshipOwner() and not a.getOtherEnd().isNavigable() and not a.isComposite() and not a.isOne2Many())]
 - ['['/]Agregar _[a.name/]_ a [c.name/][']'/](#uc-agregar-[a.name/]-a-[c.name.toLowerCase()/])
 - ['['/]Listar _[a.name/]_ a [c.name/][']'/](#uc-listar-[a.name/]-a-[c.name.toLowerCase()/])
 - ['['/]Eliminar _[a.name/]_ a [c.name/][']'/](#uc-eliminar-[a.name/]-a-[c.name.toLowerCase()/])
[else]
[null/]
[/if]
[/for]
[/if]
[/template]

[comment]Template para leer los atributos del caso relaciones unidireccionales [/comment]
[template public getPropertiesCaseRel(c : Class)]
[if (c.hasRelationshipAttributes())]
[for (a : Property | c.getRelationshipAttributes())] 
[if (a.isRelationshipOwner() and not a.getOtherEnd().isNavigable() and not a.isComposite() and not a.isOne2Many())]
### UC Agregar _[a.name/]_ a [c.name/]
| Item | Descripci&oacute;n |
|----------------------|-------------------------------------------|
|Id caso de uso:| R000 |
|Nombre caso de uso:| Agregar [a.name/] |
|Autor: | @Generated |
[c.getActor()/]
|Resumen:| El actor agrega [a.name/] en la aplicaci&oacute;n a [c.name/].|
|Precondici&oacute;n: | |
|Curso b&aacute;sico de eventos:| 1. El actor ingresa a la aplicaci&oacute;n.|
|                        | 2. El actor selecciona la opci&oacute;n de [c.name/] para agregar .|
|                        | 3. El actor selecciona la opci&oacute;n de agregar [a.name/].|
|                        | 4. El actor selecciona [a.name/].|
|                        | 5. Se guardan cambios de [c.name/].|
|Postcondici&oacute;n:|  |
|Caminos de excepci&oacute;n ||

### UC Listar _[a.name/]_ a [c.name/]
| Item | Descripci&oacute;n |
|----------------------|-------------------------------------------|
|Id caso de uso:| R000 |
|Nombre caso de uso:| Listar [a.name/] |
|Autor: | @Generated |
[c.getActor()/]
|Resumen:| El actor lista [a.name/] en la aplicaci&oacute;n a [c.name/].|
|Precondici&oacute;n: | |
|Curso b&aacute;sico de eventos:| 1. El actor ingresa a la aplicaci&oacute;n.|
|                        | 2. El actor selecciona la opci&oacute;n de listar [c.name/].|
|                        | 3. La aplicaci&oacute;n muestra la informaci&oacute;n de [a.name/] asociadas a [c.name/].|
|Postcondici&oacute;n:|  |
|Caminos de excepci&oacute;n ||

### UC Eliminar _[a.name/]_ a [c.name/]
| Item | Descripci&oacute;n |
|----------------------|-------------------------------------------|
|Id caso de uso:| R000 |
|Nombre caso de uso:| Eliminar [a.name/] |
|Autor: | @Generated |
[c.getActor()/]
|Resumen:| El actor elimina [a.name/] en la aplicaci&oacute;n a [c.name/].|
|Precondici&oacute;n: | |
|Curso b&aacute;sico de eventos:| 1. El actor ingresa a la aplicaci&oacute;n.|
|                        | 2. El actor selecciona la opci&oacute;n de eliminar [a.name/] para [c.name/].|
|                        | 3. La aplicaci&oacute;n elimina [a.name/] de [c.name/].|
|Postcondici&oacute;n:|  |
|Caminos de excepci&oacute;n ||

[else]
[null/]
[/if]
[/for]
[/if]
[/template]

[comment]Template para obtener el actor de cada clase:
1. Si, se define la propiedad Actor por clase se asocia el valor.
2. Si no hay propiedad Actor, se imprime la palabra Actor.
[/comment]
[template public getActor(c : Class)]
[if (c.valueOf('Actor') <> null)]|Actor:| [c.valueOf('Actor')/] |[else]|Actor:| Actor |[/if]
[/template]
